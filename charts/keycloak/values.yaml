--- 
clusterDomain: cluster.local
init: 
  image: 
    pullPolicy: IfNotPresent
    repository: busybox
    tag: 1.31
  resources: {}
keycloak: 
  affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 10 }}
              matchExpressions:
                - key: role
                  operator: NotIn
                  values:
                    - test
            topologyKey: kubernetes.io/hostname
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  {{- include "keycloak.selectorLabels" . | nindent 12 }}
                matchExpressions:
                  - key: role
                    operator: NotIn
                    values:
                      - test
              topologyKey: failure-domain.beta.kubernetes.io/zone
  basepath: auth
  cli: 
    custom: ""
    datasource: "{{ .Files.Get \"scripts/datasource.cli\" }}\n"
    enabled: true
    ha: "{{ .Files.Get \"scripts/ha.cli\" }}\n"
    logging: "{{ .Files.Get \"scripts/logging.cli\" }}\n"
    nodeIdentifier: "{{ .Files.Get \"scripts/node-identifier.cli\" }}\n"
  containerSecurityContext: 
    runAsNonRoot: true
    runAsUser: 1000
  enableServiceLinks: false
  existingSecret: ""
  existingSecretKey: password
  extraArgs: ""
  extraContainers: ""
  extraEnv: |
      # - name: KEYCLOAK_LOGLEVEL
      #   value: DEBUG
      # - name: WILDFLY_LOGLEVEL
      #   value: DEBUG
      # - name: CACHE_OWNERS
      #   value: "2"
      # - name: DB_QUERY_TIMEOUT
      #   value: "60"
      # - name: DB_VALIDATE_ON_MATCH
      #   value: true
      # - name: DB_USE_CAST_FAIL
      #   value: false
  extraInitContainers: |
      - name: theme-provider
        image: gcr.io/mtpo-prod/tax/keycloak-theme
        imagePullPolicy: Always
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying My theme..."
            cp -R ./CrmLogInTheme/CrmLogInTheme
        volumeMounts:
          - name: theme
            mountPath: /CrmLogInTheme
  extraPorts: ""
  # extraVolumeMounts: |
  #    - name: theme
  #     mountPath: /CrmLogInTheme
  #     emptyDir: {}    
  # extraVolumes: |
  #   - name: theme
  #      mountPath: /CrmLogInTheme
  hostAliases: []
  image: 
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: docker.io/jboss/keycloak
    tag: ""
  ingress: 
    annotations: {}
    enabled: false
    hosts: 
      - keycloak.dynamic1001.com
    labels: {}
    path: /
    servicePort: http
    tls: []
  javaToolOptions: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"
  jgroups: 
    discoveryProperties: "\"dns_query={{ template \"keycloak.fullname\" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}\"\n"
    discoveryProtocol: dns.DNS_PING
    exposePort: true
  lifecycleHooks: |
      # postStart:
      #   exec:
      #     command: ["/bin/sh", "-c", "ls"]
  livenessProbe: |
      httpGet:
        path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/
        port: http
      initialDelaySeconds: 300
      timeoutSeconds: 5
  nodeSelector: {}
  password: ""
  persistence: 
    dbAddr: keycloak
    dbHost: acid-keycloak
    dbName: keycloak
    dbPassword: 8azfFY6uuh8ovsEwdq3IHXWSsSExk7wKgeAV1G8dR7XMZjy3BwUfUHyz0L7iQ9dE
    dbPort: 5432
    dbUser: keycloak
    dbVendor: postgres
    deployPostgres: false
    existingSecret: ""
    existingSecretPasswordKey: ""
    existingSecretUsernameKey: ""
  podAnnotations: {}
  podDisruptionBudget: {}
  podLabels: {}
  podManagementPolicy: Parallel
  priorityClassName: ""
  proxyAddressForwarding: true
  readinessProbe: |
      httpGet:
        path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/realms/master
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 1
  replicas: 3
  resources: {}
  restartPolicy: Always
  route: 
    annotations: {}
    enabled: false
    host: ~
    labels: {}
    path: /
    tls: 
      enabled: true
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
  securityContext: 
    fsGroup: 1000
  service: 
    annotations: {}
    extraPorts: ""
    httpNodePort: ""
    httpPort: 80
    httpsNodePort: ""
    httpsPort: 8443
    jgroupsPort: 7600
    labels: {}
    type: ClusterIP
  serviceAccount: 
    create: false
    name: ~
  startupScripts: ""
  statefulsetAnnotations: {}
  terminationGracePeriodSeconds: 60
  tolerations: []
  username: admin
postgresql: 
  persistence: 
    enabled: false
  postgresqlDatabase: keycloak
  postgresqlPassword: 8azfFY6uuh8ovsEwdq3IHXWSsSExk7wKgeAV1G8dR7XMZjy3BwUfUHyz0L7iQ9dE
  postgresqlUsername: keycloak
prometheus: 
  operator: 
    enabled: false
    prometheusRules: 
      enabled: false
      rules: {}
      selector: 
        app: prometheus-operator
        release: prometheus
    serviceMonitor: 
      interval: 10s
      namespace: ""
      path: /auth/realms/master/metrics
      scrapeTimeout: 10s
      selector: 
        release: prometheus
test: 
  containerSecurityContext: 
    runAsNonRoot: true
    runAsUser: 1000
  enabled: true
  image: 
    pullPolicy: IfNotPresent
    repository: unguiculus/docker-python3-phantomjs-selenium
    tag: v1
  securityContext: 
    fsGroup: 1000
